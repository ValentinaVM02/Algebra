##
# 2WF90 Algebra for Security -- Software Assignment 1
# Integer and Modular Arithmetic
# solve.py
#
#
# Group number:
# 28
#
# Author names and student IDs:
# Atilla Rzazade (1552848)
# Daua Karajeanes (1619675)
# Valentina Marinova (1665154)
# Gergana Valkova (1676385)
##

# Import built-in json library for handling input/output
import json
# from locale import RADIXCHAR
from multiprocessing.managers import ValueProxy
from Features import modularReduction, modularInverse
from radix import get_radix_rep, integer_addition, integer_subtraction, integer_multiplication_naive
import time

radix_dict = {
    '0': 0,
    '1': 1,
    '2': 2,
    '3': 3,
    '4': 4,
    '5': 5,
    '6': 6,
    '7': 7,
    '8': 8,
    '9': 9,
    'A': 10,
    'B': 11,
    'C': 12,
    'D': 13,
    'E': 14,
    'F': 15,
    '10': 'A',
    '11': 'B',
    '12': 'C',
    '13': 'D',
    '14': 'E',
    '15': 'F'
}

radix = 10
varX = 0
varY = 0
conversionX = False
conversionY = False
answer = 0
lengthNumX = 0
lengthNumY = 0


def solve_exercise(exercise_location: str, answer_location: str):
    """
    solves an exercise specified in the file located at exercise_location and
    writes the answer to a file at answer_location. Note: the file at
    answer_location might not exist yet and, hence, might still need to be created.
    """

    # Open file at exercise_location for reading.
    with open(exercise_location, "r") as exercise_file:
        # Deserialize JSON exercise data present in exercise_file to corresponding Python exercise data
        exercise = json.load(exercise_file)

    ### Parse and solve ###
    global radix
    global varX
    global varY
    radix = exercise["radix"]
    varX = exercise["x"]
    varY = exercise["y"]

    # Check type of exercise
    if exercise["type"] == "integer_arithmetic":
        # Check what operation within the integer arithmetic operations we need to solve
        if exercise["operation"] == "addition":
            integer_addition()
            # Solve integer arithmetic addition exercise
            pass
        elif exercise["operation"] == "subtraction":
            # Solve integer arithmetic subtraction exercise
            pass
        elif exercise["operation"] == "multiplication":
            # Solve integer arithmetic subtraction exercise
            pass
        elif exercise["operation"] == "multiplication_primary":
            # Solve integer arithmetic subtraction exercise
            pass
        elif exercise["operation"] == "multiplication_karatsuba":
            # Solve integer arithmetic subtraction exercise
            pass
        elif exercise["operation"] == "extended_euclidean_algorithm":
            # Solve integer arithmetic subtraction exercise
            pass
    else:  # exercise["type"] == "modular_arithmetic"
        # Check what operation within the modular arithmetic operations we need to solve
        if exercise["operation"] == "reduction":
            # Solve modular arithmetic reduction exercise
            pass
        elif exercise["operation"] == "addition":
            # Solve modular arithmetic addition exercise
            pass
        elif exercise["operation"] == "substraction":
            # Solve modular arithmetic substraction exercise
            pass
        elif exercise["operation"] == "multiplication":
            # Solve modular arithmetic multiplication exercise
            pass
        elif exercise["operation"] == "inversion":
            # Solve modular arithmetic inversion exercise
            pass

    # Open file at answer_location for writing, creating the file if it does not exist yet
    # (and overwriting it if it does already exist).
    with open(answer_location, "w") as answer_file:
        # Serialize Python answer data (stored in answer) to JSON answer data and write it to answer_file
        json.dump(answer, answer_file, indent=4)

# removes the sign from the beggining and puts True for negative values and False for positive values


def get_sign(a):
    return True if a[0] == '-' else False


def determine_m(x, y):
    m = 0
    signedX = get_sign(x)
    signedY = get_sign(y)

    x = x[1:] if signedX else x
    y = y[1:] if signedY else y

    if len(x) == len(y):
        m = len(x)
    elif len(y) > len(x) and signedY:
        # -1 because 0th index is sign
        m = len(y) - 1
    elif len(x) > len(y) and signedX:
        # same
        m = len(x) - 1
    elif len(x) != len(y) and not signedX and not signedY:
        m = max(len(x), len(y))

    return m, signedX, signedY, x, y


def get_operands(x, y, i, j, signedX, signedY):
    # index - 2 since the answer contains extra 2 indices
    index_x = i - 2
    index_y = j - 2
    x_index = int(radix_dict[x[index_x]])
    y_index = int(radix_dict[y[index_y]])
    # convert index to corresponding digit (i.e. '2' -> 2, 'A' -> 10) and sign (i.e. '-A' -> -10)
    dictX = -1*x_index if signedX else x_index
    dictY = -1*y_index if signedY else y_index

    return dictX, dictY

def multiplication_karatsuba(x, y, length, radix):
    x = x[1:] if get_sign(x) else x    
    y = y[1:] if get_sign(y) else y
    result = karatsuba_recursive(x, y, length, radix)
    return result
    

def karatsuba_recursive(x, y, length, radix):
    print(x, y, length)

    xH = 0
    xL = 0
    yH = 0
    yL = 0
    answer = 0
    number2 = 0
    number0 = 0
    number1 = 0

    if (length == 1):
        int_x = int(radix_dict[str(x)])
        int_y = int(radix_dict[str(y)])
        int_xy = int_x * int_y
        right_digit = str(radix_dict[str(int_xy % radix)])
        left_digit = str(radix_dict[str(int_xy // radix)])
        return left_digit + right_digit

    if (length % 2 != 0):
        length += 1
        x = '0' + x
        y = '0' + y
    xH = x[:length//2] if length > 1 else x
    xL = x[length//2:] if length > 1 else x  # x = xH*pow(radix, length/2) + xL
    yH = y[:length//2] if length > 1 else y
    yL = y[length//2:] if length > 1 else y  # y = yH*pow(radix, length/2) + yL
    print('high = ', xH, xL, yH, yL)
    # need to figureout how to handle the numbers so that I transfer them into ints on which manipulations can be made
    # print(integer_addition(yH, yL, radix))
    number2 = karatsuba_recursive(xH, yH, length//2, radix)
    number0 = karatsuba_recursive(xL, yL, length//2, radix)
    xh_xl = integer_addition(xH, xL, radix)
    yh_yl = integer_addition(yH, yL, radix)
    new_length = max(len(xh_xl), len(yh_yl))
    # if len(xh_xl) < new_length:
    #     xh_xl = '0' + xh_xl
    # if len(yh_yl) < new_length:
    #     yh_yl = '0' + yh_yl
    
    number1 = integer_subtraction(integer_subtraction(karatsuba_recursive(xh_xl, yh_yl, new_length, radix), number0, radix), number2, radix)
    print('numbers', number2, number1, number0)
    add1 = integer_multiplication_naive(number2, ("1" + length * "0"), radix)
    print(number1, 'and', ("1" + (length // 2) * "0"))
    add2 = integer_multiplication_naive(number1, ("1" + (length // 2) * "0"), radix)
    # print(add1, 'neshto', add2)
    answer = integer_addition(add1, add2, radix)
    answer = integer_addition(answer, number0, radix)

    return answer


def division(x, y, radix):
    i = 0
    while (x[:1] != '-'):
        x = integer_subtraction(x, y, radix)
        i += 1
    return get_radix_rep(i, radix)


def extended_euclidean_algorithm(x, y, radix):
    a1 = '1'
    a2 = '0'
    b1 = '0'
    b2 = '1'
    while (y[:1] != '-' and y[:1] != '0'):
        q = division(x, y, radix)
        length = max(len(str(y)), len(str(q)))
        r = integer_subtraction(
            x, integer_multiplication_naive(q, y, radix), radix)
        x = y
        y = r
        length = max(len(str(q)), len(str(a2)))
        a3 = integer_subtraction(
            a1, integer_multiplication_naive(q, a2, radix), radix)
        length = max(len(str(q)), len(str(b2)))
        b3 = integer_subtraction(
            b1, integer_multiplication_naive(q, b2, radix), radix)
        a1, b1 = a2, b2
        a2, b2 = a3, b3

    d = x

    return d, a1, b1


def decimal(x):
    if x >= '0' and x <= '9':
        return ord(x) - ord('0')
    else:
        return ord(x) - ord('A') + 10


def compare(x, y):
    if len(x) > len(y):
        x_greater = True
    elif len(x) == len(y):
        x_greater = x > y
    else:
        x_greater = False
    return x_greater


def modular_addition(x, y, mod, radix):
    x = modularReduction(x, mod, radix)
    y = modularReduction(y, mod, radix)

    z = integer_addition(x, y, radix)
    if compare(z, mod):
        z = integer_subtraction(z, mod, radix)
    return z


def modular_subtraction(x, y, mod, radix):
    x = modularReduction(x, mod, radix)
    y = modularReduction(y, mod, radix)

    z = integer_subtraction(x, y, radix)
    if compare(z, '0'):
        return z
    else:
        z = integer_addition(z, mod, radix)
    return z

# def modular_multiplication(x, y, mod, radix):
#     x_length = len(str(x))
#     z = multiplication_karatsuba(x, y, x_length, radix)
#     z = modular_reduction(z, mod, radix)
#     return z


def inversion (x, mod, radix):
    x1, x2 = '1', '0'
    while(len(mod) > 1 or mod[0] != '0'):
        q = division(x, mod, radix)
        q_length = len(str(q))
        r = integer_subtraction (x, integer_multiplication_naive(q, mod, radix), radix)
        x, mod = mod, r
        x3 = integer_subtraction (x1, integer_multiplication_naive(q, x2, radix), radix)
        x1, x2 = x2, x3
    
    if x == 1:
        return x1
    else:
        print('inverse does not exist')



x = "6532195861762276690903859A6719324211209395A7A343631614A2430312693870061883341316A89116A1721950A465A5715077297652492442A64A7841A704327459063805661770729096078725A56471A9255478983879265284598367183692637427533A461223455609738277552AA501726139580A00052465991A8551A18764863454961275778630609A774364701887027A976718995604679701A12391A223A841A019467AA252053597209A2964A47912A45AA392068571673862303526A9740336A7415251062517433351A8412599A15900115641560298183515018A1230599A2645229080864A6755207178A617210052A235A82A9A050597199828110708868971760872AAA33707716044393A9430596128079193A352303724A9275153303237A48A3AA66068415802087299AA471531505531738A3A06973929230116165A95695313768103816824686034585091186326A4742741479744635A65577808249405203AA058727277442420461548A53150788871125562991A9AA5884A930114A107A53908048904298682651128A54A5913935779513750266050A777107A4919544A810653638644158925599155A2819A869963A5732248AA47984551A89389A451029753052198476374664136986556A19A"
y = "642057959936758780238A8A11A136785743077823325A009760670454646145396187343288271A375213820A0560585199382181571215076567589238613750456681AA2423A2650414414223524725691658138202203730AA966871658780196797670A753919426121A57667544832255041442247652A53A44454061A272207A5724A719702A991980706568977030768524A3A781A08A1400A9845A651182630936A008A188A367127519543A638670746525A58496A830A86A5844717301986A7A752525488063264085A4944485062542894498829150034876778480A05156460653974908402A026314390AAA83A5A9A5764A919285A08AA96913A89434747591AA00A285A8221AA4889595847908581902891060217705023269598661494613690923011A539894A254202A3750227A30553783A373246093A0847410382412834805398348245829493A3010A1904889235A7609AA99909407189A93151043984999826942A038947049950640088943990544123200639257280A03896719637331731405043099079736923A58970587A7747211A58581136065436480770360990977037472514741A12A22088029585343198921039806112A5686225954101262622280A853178677135563959474626908A9061A8A"
    
print(multiplication_karatsuba(x, y, max(len(x), len(y)), 11))

# x
# y = "2D0D08BB790302A19964CA7297121C6AC3103331271802D9718C7278AA5C13C82929751710A625CA6D723526BCC226B782A49AD27A4BC71C3C3B85A977B1CDA6189DAD6AA82A81B763B1CC880A11B08347044455A920B65077C7DC3442ACBA3A4519937D2349B0189B67138612CCAD1307746BAB2B8219A64175CA5A28C87191DD9BB589C057AAC5B211386A320B6522D90065D3D17B792187DC2568384B0C7256AD65B48372C52AA121400644130B8165AD174C22D814D710AD8A477331B6252967341086B0CB90D305A5C68691C0A69AA1A410532944A03D3D6A4ABB193DABCB95601B43BA1B789AB9706B04389A0AC5BC45B85C701449B711CB1C96C704BB2B2D869B75352BD5C06B18BBC26D2C3C17CB2A4269CB1A3A0A088931B697D78B15D16BB1513BC6A4B8446CB8965C60813B4632DD6231C2171ABD2C00B277822715A02D31C517159D3C88BA159D4A62C8BC1A9325B601D6BB653AC7161DD39B2CA48B23121A41BD904B6D88781AD897A6B78AA83D2A28596854207842AD9CC2D059DB1680A3DABB5823314C745A65B2D51C67C8A65229C133A4C6CA30C862B5D69DAB2332208A7DA09226968CA9186D9A63C40C803"
# start = time.time()
# result = extended_euclidean_algorithm(y, x, 14)
# current = time.time()
# print(result)
# print(current - start)

# print(integer_subtraction

#                           3))

# print(integer_subtraction('AFF', 'EDA', 16))

# print(modular_addition
#                 ,'200122333323122421432313220232211004021120142200411014313132101431142434202203400212012222104410143034230322100303304330133132440231141021133142110410141214300143332340301022210404211004342232240130242031344401111431314221420141420114234303321310330314241114121031401123044241202224301404044143413233422332032224012312100334231030332104333032313321303243434442033231010402334324342402433022404113334443202033121241043003140002203233302020020241433004424102101330030202130033333104443231222142310423133011414121202102403041021340301220044413214123101434331131022301313034010144213213304214420133321444022041241030134440144321331344421021004142312411220331222040244142414413014003343232444400113201434244322400333302100000113311334213044441120433020201133302342314114332234421144244122140102320140110401000344414213220134242010331410424132423204423242103033140324044404112132331134440042432021444313120303242220040431233140320444442422132331212141333142122133012110442010112100002100221332232221134013200003001031202444242001344213413003413202311432002004021320244132343332013002121032323131221223234202332233012444103223211032123400110102120434422043023242234324003114232144040300132441032423144000341443424222410413414013342412124031414112140300420320044134000402334443140343332311144414210211443442241224103423444042303301344002204044304340342401030120314041111333124134341340324001343122314111214111304323220043202042031213424003',
#                 '124420141100344331213220142234212133433211221322200210133331022130223221113132114242001104142112134434112442100220401143223133403023110023013440431340301222411441320241323230120134111440413231124433300422113240221431211221023013124224034422103001203434204203010040420413141321241110212043043400111011340322124024030310040242013413243030412322401201303344220224421030420424130404031134331223220310140321122011342212403243013214443021421413420321231001321432140011404100320134044424434413410410143143034333300422343022224111423134401442320402440143234023231031212411003324030142034103221113240032003200434104123132012211111204432112041134432042443244303403100034420034234120021342100241410124431304142133344334020230243212331242003304012020110242221024410343212331113412100423022244323014042444322202242131031402224134220043332241214431301331241143311010102024243131224111033411321201033214233003213412012300120144003244403002114420421001223144423321420204132221110122421421320340310222201242220233224132024423344341113334021303143033334340304333421414231411131403232323332041034014231113211220140120144200032204220444141232442243231300110212101011101330203204140012231121324322110322320403243320244232111013101422440334234034230041134401100032443404432130043244130300244443130204300031043122102413131004030441334421003430233421002132434410030410412013210023131344333143033100104130113101020211243212014244100323040014310143443212234',
#                 5))

# print(modular_subtraction('10BEFFA48029E2498E059C91D53B9D6EC5715FE7304D2E8034EB50F770C564C43AC03D118301F27E37120C7132C7495A783643AD16FC82DED4C8173660C7CDB7AC50FB5DFC05ED18EE641284AC955FA34FEB21E7A000348A27033C337C22785EC8178514FC5EC5721DED98583B9602079309E2BBBD5B3BAB626919EB7C198AC9CBA1C98F7B50B524D880EBDAFACBBE57E9C8B3E991C4DBD17F6EFCA8F2A4DD83733351801EF8C83970FFEC27A57A367868A262EE5E80D6294DA58C6E7030887A098331C8F3DD11EEE2AABE06A50C3D91F25227C19ECB63BDDDE6EBA55AD065A2061AD3455C0F50819C6F2C6C6ED228E8FE66C8E8924892723A5F094660A74F612EDA22AD2234A1556B5F0CA0BF1B26A47C15CBAAFC80B96563B2F4500010FC816320AF7BB7BF343577417D5BCA4ADDEC0118C7792CA329406689CFBF883F01A6885340EE2A120974C65CC75159E4583C81BA804052FEDDEB9C2D345C18D406234E9E5631AC106933FC997FF645B6A22E06D64B965D622E05F4603C072864BCB56D67FEFA7ABE98686E0C6CCE093FB99ED2D4679BE234DBEA174186427FF17EA',
#     '38FBD3ADEE116D9DF87CEE7A82E1A49D672721B84EE7D0076E613CDFD446C5176CFACCA4BC612DEF10EE7E935525649363ED1FE7221282D5BDA7DD738A1DC39231CECDB772B7C2E7D4FEF4BE8100D7D37FC3FE06BEA3FEC7D1918D87D0AFD4D2B304C0D31C5FE69F20CE11510492FD0CBA1240829990818EB6D3B699ABC3E53AC9A412F40A0129934D574706137225D8DABF16FF754A8755B0F40935D003871366200B42FBA1440B258756B1BB15AB29C6E8485D263953A751F2940A6761C1622BABC27FABD8B8AAC0BC7EE78A3C53B9BE37E900239C401BC2E1C233C222377A5E0FE87AC2E1B62F76D3A7323DEF6C2694258E44C59859B019B4EDAC6142A672E09C05E1297104683E857A0F794C46436E66ACF9C70BDEBB5430806BE211867A644ED02A9C0B0AC76C6FBE7A1503A8489531961A5B5C335115A9107E5E198F003990E895D68DCCDDDB906050E2BE4A0F54F559C9C13DFEE96C40DDE6CC34A53282B2A02503CFFD7EC3331E98E06709D4DD5A26E5B2072192156796D339655BF4F5C4852103F0A8D05856FE089D75760EBE4144E64EEDFC120F6884785E3CD3A',
#     '1482E95C267EB1588C38378BDA3DE42A85CFDFDAE3187AACC7F0556C9A32F87AE61E1F98D0D2C3C9471F23D0F3BE5149A8C6831C91CD8B5051725FBB9AD622A135F9318036BB2E0ABD095E9E9CBB5884B37047D77D66A5F6E51EB2A79F44AEBA18380B718B02152D3ADF16059042249622F171DDFFB47F90C78212B816373FF825A4D1F4BFF7A76CE67FC5009FCEC60BF967B7628909D3BE7A67C938F40304A5DC0A7BC7B5C574CFC176D9A5F3E8F08AC2422B536F7D37AE45295108D21BAAA1BB352735F59E0F41F6D7F258B7AC805E09A2243E20B95552B42DED7A311F04A9854D38AFA9D1CC0500519DA99E013927508355BB1278E044BF1E0AFA50E4FF88E773C8F62A857212F7FBD12E86FEB607B926BF01A10C486B39311CD6BDC40189C1DE04ADFF8EBB7A9C622C73EA02D3FF3A72CDDAB78EEF9B6E28BC79345BBC0E0255D1A6CDD59B3130B3B815C7B7FD8AC7C0FD5E6C620BBA9EE937D865DABE2E1C2C518A4E894F395E26F990A0D26F72F2F38A9D90B410BBF89EACC613505A2BD22AF37EE22D297F1AC3855BB951FD29575244E525EC744C8F573F3F6B85614',
#     16))
